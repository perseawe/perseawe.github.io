{
  "blog": {
    "name": "谢伊的小屋",
    "footer": "Copyright 2016 © Xinyu Zhang. Powered by Innsbruck and Github.",
    "pagination": 15,
    "description": false,
    "google-analytics": "UA-78421867-1",
    "css": "body { max-width: none; }",
    "plugin": {
      "cname": "xyzhang.xyz",
      "google-fonts": "",
      "disqus": "xyzhangxyz",
      "rss": "http://xyzhang.xyz/atom.xml"
    }
  },
  "posts": [
    {
      "title": "Hello, Innsbruck.",
      "content": "在这个月初的时候，[戍爷](https://quietshu.github.io)告诉我他觉得现在现有的博客系统都太过重量级，在使用的时候，需要花不少功夫才能使得整个东西工作起来。于是他就开始动手写一个非常轻量的博客系统，并很快的实现了一个不错的版本。在向我展示的时候，这个项目已经具有不错的效果，看起来非常舒服，而且还设计了非常自由的插件系统，可以非常方便的对项目进行拓展，最重要的是，的确非常轻量。同时，戍爷还给这个项目起了一个非常棒的名字，[innsbruck](https://github.com/quietshu/innsbruck)。\r\n\r\n恰好最近因为手上的MB Air容量有限，更换了一台容量较大的MB Pro，在配新机器的环境的时候，索性直接将整个博客也都迁移到 innsbruck 上面来，在使用的过程之中为这个项目再做一些贡献，也算是在最近繁杂的环境之中做的一个有意义的事情吧，特别是最近更觉身体不适，还是减少其他的分心事情，专心的学习一段时间，写写代码，调理一下生活吧。",
      "link": "1",
      "time": 1464332373638,
      "plugin": {
        "thumbnail": ""
      }
    },
    {
      "title": "病与夏风与积雨云",
      "content": "这个月中的时候以学生教练的身份参加了在泰国普吉岛举行的ACM ICPC World Finals 2016，虽然说是收获颇丰，然而从普吉回来之后就一直觉得体力有些透支，一周没啥精神之后果然又发起了低烧，幸好早就开始吃药，在认认真真的睡了几天之后总算是有所缓解，虽然还是没什么体力，但是精神总算是恢复了，毕竟需要开始应对接下来的考试了呀。\r\n![夏天的积雨云_0.jpg](/static/夏天的积雨云_0.jpg)\r\n不过当人生病难受的时候，反而会更加意识到让自己觉得快乐的事情吧。发烧的那天夜里，在精神稍许好些，下楼买饮用水的时候，意外的发现外面的温度是如此的舒适，风吹在身上会让身体不由自主的舒服起来，如果非要比喻一下，那大约就像是喵星人被抚摸时舒服的眯起眼睛的那种感觉，是能够让人忘却一会身体的不快的感觉。而白天从两栋楼之间的四方的平整场地走过去的时候，就能够感受到风从两栋楼之间的缝隙穿过，然后绕着我飞舞了一周，把所有的一切都带走了。果然，被温柔的对待是如此一件令人沉醉的事情，夏天的风更加能够给人这种感觉吧。\r\n\r\n当然，跟夏风一起到来，还有夏天的积雨云吧。在很久之前看到细田守的纪录短片中，特别的提到了细田守作品中经常会出现的一个意象，那就是夏天的积雨云。\r\n ![夏天的积雨云.png](/static/夏天的积雨云.png)\r\n因为“积雨云会给天空带来生气勃勃的感觉”，所以非常喜欢细田守监督的《穿越时空的少女》和《夏日大作战》两部作品，蕴含在里面的，是能让人向上的力量吧。无论是望着远处的积雨云，感受着略带潮湿的风轻抚过脸庞带来的温柔的感觉，还是在这片生机勃勃的天空之下发生的令人愉快、失落或是呐喊的故事，其实都令人陶醉，不是吗？\r\n![夏天的积雨云_2.jpg](/static/夏天的积雨云_2.jpg)\r\n我想，这些时候的我，都如同《肖申克的救赎》中Andy开着车沿着太平洋向着自由兜风而去一样潇洒吧，那是如此的生机勃勃，即使只是片刻，也是要拼上一切去努力找寻的和解。愿在这片同样天空的温柔之下，所有人都能够幸福的生活。",
      "link": "2",
      "time": 1464714686999,
      "plugin": {
        "thumbnail": ""
      }
    },
    {
      "title": "《守望先锋》游戏谈",
      "content": "虽然马上就要进入考试周了，但是随着《守望先锋》(overwatch) 的推出，还是在上面扔了一大把的时间 /(ㄒoㄒ)/~~\r\n\r\n![overwatch.jpg](/static/overwatch.jpg \"《守望先锋》全家福\")\r\n\r\n先说结论，《守望先锋》绝对是年度大作级别的游戏，个人评价上是一个各方面都不输于  GTA 5 的作品，并且社区的反响也是相当火爆，说明暴雪继续延续了他们的精品传统，继续打造这块金招牌。在玩这个游戏的过程中，我也去查找了很多相关的知识，包括游戏背景、设计、评价等，游戏本身也是颇具一波三折吧。\r\n\r\n<center>\r\n![titan.jpg](/static/titan.jpg \"传说中的 Titan 项目\")\r\n</center>\r\n\r\n暴雪很久之前一直想要搞一个叫做《泰坦》的大新闻，这个游戏的设定相当庞大，白天的时候，游戏中的角色就是正常的生活上班，就像是在玩一个慢节奏的模拟游戏；而夜晚降临，则所有人都化身不同的阵营角色，开始一场快节奏的 FPS 对决。据说为了把白天的模拟部分搞得更好，暴雪还特地招募了《模拟人生》系列的研发人员。然而使用这样的设定存在一个比较严重的问题：当设定过于复杂时，无论是从设计还是开发角度，都需要更多的努力和能力来完成整个游戏。在这个方面，《DOOM启世录》中的《大刀》就是另一个反例，因为过多的设定和复杂的世界观，导致最后的作品无论是从开发还是游戏角度都变成了灾难级别。回到《泰坦》，因为设计和开发过于复杂，于是《泰坦》项目经过了若干年后，最后因为游戏性的问题宣布项目解散，虽然项目在新模式的尝试中失败了，但是却积累了很多的经验，而项目组中的一部分成员则保存了下来，继续开发夜晚的FPS部分，也就是现在的《守望先锋》。\r\n\r\n![TeamFortress2.jpg](/static/TeamFortress2.jpg \"同样是大作的《军团要塞 2》全家福\")\r\n\r\n从游戏模式上来说，《守望先锋》与V社很多年之前（2008年）发布的游戏《军团要塞 2》（Team Fortress 2）基本上是一样的，参考了很多 TF2 的设定（当然 TF2 的各种设定也有不同的历史出处），然后在这个基础上做了很多更适应形势的新的变化。第一处就是使用了暴雪擅长的卡通风格的游戏风格设计，并且在游戏背景情节上做了很合适的彩蛋和环境因素设计，人物的动作也设计的十分帅气，当然这是暴雪一贯擅长的部分；第二处就是对 PVP 中的游戏节奏、定位和计分板都做了新的尝试，包括玩家只能够看到自己的数据，另外还启用了匹配系统，同时这个匹配系统比 CS GO 的匹配系统更加科学合理，现在看起来这些新的尝试得到了社区非常好的反馈，在收集资料的过程中，看到知乎相关问题中已经有人对这个方面做了[更加详细的描述](https://www.zhihu.com/question/26525931/answer/99404152)，相当精彩。即使是V社同时推出了 TF3，相信《守望先锋》也会因为这些更适合的设计受到更多的关注（然而G胖并不认识 three 怎么拼）。\r\n\r\n总而言之，《守望先锋》虽然是旧瓶装新酒，但是最终的效果确实是好的令人吃惊，上面虽然没有提到，但是游戏在平衡性上作出的努力效果非常好，首先无论选怎样的阵容都会有不同的套路和打法，但是不同的阵容所侧重的方向就会有所不同，需要根据场上的形式不断调整，也让游戏具有更多的乐趣。现在看起来，的确是一个让所有人都满意游戏，是一个上手一玩就能感受到十分用心制作的精品游戏。从这几天的游戏体验而言，的确是让人欲罢不能的大作。\r\n\r\n当然，游戏虽然这么棒，但是接下来的一个月还是不要玩了吧，专心期末火葬场是真的o(╯□╰)o   ",
      "link": "3",
      "time": 1465054511043,
      "plugin": {
        "thumbnail": ""
      }
    },
    {
      "title": "从《DOOM启世录》到《游戏引擎架构》",
      "content": "其实也是由于最近《守望先锋》发布，在查资料的时候看到了油管上面几个当年《雷神之锤》的比赛视频，也就想起来[《DOOM启世录》](https://book.douban.com/subject/1152971/)这本书。因为这本书初版已经有一些年头了（2004年），所以当我第一次读到这本书的时候（大约11年左右）市面上已经不是那么容易买到这本书了，也就一直在阅读一个精装的电子版。第一次阅读这个时候，一种被旋涡陷入的炫目感一直充斥在脑中，虽然不是很懂，但是也从内心深处觉得这实在是无时无刻不令人激动，读罢之时内心充斥着是当身为伟大历史潮流的一部分时候的那种“自豪感”？这种感觉实在是不好形容，或者叫做“幸运感”？或者叫做“创造感”？或者是这几种的混杂吧？这或许真的只有弄潮的人才能体会的那种感觉，那种无论做什么，都觉得是对的愉快感。从《DOOM启世录》这本书中就可以体会到这个，当然，现在看来，这本书在书写的时候故意使用了一些文学处理手法，虽然是一本传记，但是却很巧妙的安排的故事之间的结构，使得读起来真的像是一本历史书，真的看到了一个时代的兴起与发展。这对当时还非常Naive的我是非常震撼的，那个时候的我也热衷于阅读各种历史书和传记，而这本是当时读到的离我最近，但是也离我最远的传记吧。\r\n\r\n多年之后，这本书去年的时候重新发行了一次纪念版，也就是[《DOOM启世录》（纪念版）](https://book.douban.com/subject/26642310/)这本书。在这几年期间，我也十几次的读了这本书的电子版，当然因为个人的成长，每次读这本书的时候都会看到不太一样的东西，也非常希望能够拥有一本纸质版来阅读。虽然去年打算再版的时候就已经听说了这个消息，但是真正发行后反而忘记去入手一本。最近看完那几个《雷神之锤》的比赛视频后，也是快点去入手了一本，到了之后立刻又读了一遍，也算是感慨万千，圆了一个心愿。\r\n\r\n有关《DOOM启世录》这本书我没有任何多余的话，大家自己入手来读一读就知道这本书有多棒了。单单作为一本传记而言，这本书就已经是上佳的作品，更何况里面描述的是最令人激动的计算机技术刚刚起步阶段的传奇故事，而豆瓣的书评区也积累了非常多很棒的书评，也推荐大家读一读。油管这本书的精神我也按照惯例摘抄一下这本书的一句原文：\r\n\r\n> 在信息时代，客观障碍已不复存在，所谓障碍都是主观上的。如果你想动手开发什么全新的技术，你不需要几百万美元的资金，你只需要在冰箱里放满比萨和可乐，再有一台便宜的计算机，和为之献身的决心。————John Carmack(约翰·卡马克)\r\n\r\n![id Software早年的员工们，最左是约翰·卡马克，最逗是约翰•罗梅洛](/static/idSoftwareInEarlyYears.jpg)\r\n\r\n我也就多来说一些别的事情吧，在第一次读完《DOOM启世录》这本书之后很久，我又读到了另外一本也值得大家亲自来读一读的书，那就是Paul Graham的[《黑客与画家》](https://book.douban.com/subject/6021440/)一书，这本书同样具有很多非常棒的豆瓣书评，同样推荐大家读一读。《DOOM启世录》这本书讲的是传奇故事，《黑客与画家》这本书就是讲的这些传奇故事是如何出现的。对我来说，当我第一次读前者时，因为还缺乏对计算机科学与技术领域的了解，完全没怎么入门，只会写几个算法题的小代码而已，完全是当做一本小说来读的，崇拜着这个传奇的故事，但是在之后也算是慢慢的入门了之后，再读前者的时候，更多的看到的是两个John为了梦想而做出的努力，一个John的技术是如何的伟大而具有创造力，而另一个John的设计是如何踏上了时代的步点，而id Software又是如何做了成功的事情，又是如何做了失败的事情。而当第一次读后者的时候，已经是有点入门的时候，刚刚处于懵懵懂懂的时刻，这本书对当年的我简直是如同当头棒喝一般，一下子给我灌输了很多我从未见识过、想象过的思想，从那个时候开始，我才算是在思想上正式的入门了，搞懂了自己在干些什么，以及要如何去做这些事情，属于世界观和方法论上的指导。当然，说到非常棒的理论与思想，当真正的接触到其中的一个之后，就会慢慢的觉得很多东西都有些接触到真正棒的部分了。额...这个有点绕口，大概的意思就是说人果然还是要成长了一段时间，积累了一些见识之后，才能逐渐解锁某个体系里面更深层次的东西。再之后读了[《禅与摩托车维修艺术》](https://book.douban.com/subject/6811366/)、[《深入理解计算机系统》](https://book.douban.com/subject/5333562/)、[《失控》](https://book.douban.com/subject/5375620/)这些书，都是属于不断重读不断有新的收获的书，也算是螺旋式上升的发展道路吧。真是有趣，经典的力量可能就在于这里吧，提供的是深刻而系统的思考理论，能够让人在实践中慢慢品味，慢慢解读，所以说半部论语治天下事实上也是能够做到的嘛。最近重读[《荀子》](https://book.douban.com/subject/1214302/)，也深觉其中的不同味道，跟高中时候读的感觉又完全不一样了，特别是在进入大学之后，系统的了解了康德、黑格尔到马克思，以及之后发展的各种不同的西方马克思主义哲学观和中国自身的各种特色哲学理论体系之后，其实也算是慢慢的形成了一套自己的价值观（多么理所当然）。当然，说起来影响最大的就是黑格尔的肯定、否定、否定之否定的三段论，以及马克思的辩证法以及螺旋发展观吧？这也就使得我在重读这些书的时候，一方面是尝试着看到新的以前没有看到的东西，另一方面就是尝试着三段论，尝试着肯定书中的理论，肯定自己的看法，然后再想想如果需要否定这些肯定应该怎么做？我能够否定我的否定吗？在这个过程之中，也算是尝到了无穷变化的妙趣吧。\r\n\r\n除了上面在三观方法论方面的东西之外，读技术类的书籍也具有同样的方法吧。当然，在学习技术这方面，跟着人学习比跟着书学习对我来说来的更舒服一些，我是非常佩服很多的人的，比如像是[Wei Wang](https://github.com/onevcat)、[Yaoyuan](https://github.com/ibireme)、我的好朋友[Shu Ding](https://github.com/quietshu)以及好朋友也同样佩服的[Jiabao Guo](https://www.byvoid.com/blog/)等等，他们都是能够不断学习，不断实践的人，对我来说，他们就像是一本书一样，让我也不断的学习他们。当然，我觉得，这是在先形成自己的技术观之后再做的事情，（说着说着就开始输出技术观了，其实自己觉得合适就好）可以先读经典，特别是像上面提到的《深入理解计算机系统》（CSAPP），还有各种动物书，机械工业大套装，图灵大套装之类的东西，然后一边做一边学，考虑一下为啥要这么做？如果我不这么做呢？有啥更好的方法吗？这样有什么坑，我能cha掉吗？说起来也是有点惭愧的，虽然我开始接触信息学竞赛，开始写代码还是从蛮早就开始了，到现在也算有九年了，但是一开始写的代码实在是野路子，后来加入了模块化，能够把一个文件里面代码写的有点道理了，但是相比于身边很多优秀的代码手而言，写的代码实在是缺乏灵气。后来写长代码的时候果然又遭了很多坑，特别是在上《操作系统》课程的时候，自己动手实现Kernel，真是吃尽了苦头，拿出来的东西还非常Toy，当然这是在比较后面的事情了。于是就恶补了一波如何好好写代码的知识，在这个期间也开始系统的学习iOS开发，这个时候才大概懂点什么叫做OO，代码是如何Run的，啥叫运行时等等，然后在学习了[《现代编译原理》](https://book.douban.com/subject/1435535/)自己尝试搭建编译器，学习体系结构自己来做CPU，也算是逐渐的搞懂了整个计算机科学与技术的体系结构和套路。于是，在前一段时间重读CSAPP的时候，读起来觉得写的真是太TM有道理了，设计的实在是太奇妙了，很多地方真是是要踩过了坑之后才知道为啥是这个样子而不是某个样子的，所以说这个过程也算是三段论样的螺旋发展吧。这个学期课余之时开始读[《游戏引擎架构》](https://book.douban.com/subject/25815142/)，从头读到尾实在是爽快的厉害，觉得这套东西就应该这么work，各方面都非常都道理，特别是里面面向对象的部分，写的也是十分精彩，当然这本书我在阅读的时候，是当做一本《如何组织大型工程》（游戏版）来阅读的，这本书的原始内容和翻译都是非常良心的，不过因为是大部头，所以有限推荐给需要的人士吧。写到这里有点累了，之后会专门为这本书写一篇长书评的。\r\n\r\n这篇文章是晚上失眠的时候写的，一通胡言乱语而已，其实心里面有万千言语想要写出，但是自己的笔力还不能很好的控制吧，权当随笔一篇，纯私货而已。\r\n\r\nPS:\r\n上面提到的那几本书我也就纯私货的推荐一下吧：\r\n\r\n>《DOOM启世录》：无论从传记小说的角度看，还是从一个计算机行业的从业人员的角度看都是非常棒的书。\r\n>\r\n>《黑客与画家》：非常好的三观书，特别是里面对于“创造”部分的讨论，对我影响十分巨大，很多领域并不是零和博弈，当创造的时候是产生了更好的世界，这也就是为什么我们的世界变得越来越好的原因。\r\n>\r\n>《禅与摩托车维修艺术》：一本哲学书，里面对思考方法和系统思维的讨论非常深刻。\r\n>\r\n>《深入理解计算机系统》：应该多读几遍的书，每读一次有新的收获，学完数据库、操作系统、计算机体系结构、编译等等计算机课程之后，每一门课都会对这本书产生新的看法。\r\n>\r\n>《失控》：KK的书，里面有很多观点是非常棒的，至少我看的时候有一种耳目一新的感觉，特别是里面对于“涌现”的表述，让我觉得非常有道理。计算机科学与技术就是一个不断涌现和抽象的过程（这个是个人观点，见文章最底下的口胡部分）。\r\n>\r\n>《现代编译原理》：虎书。计算机专业同学的必修课。\r\n>\r\n>《游戏引擎架构》：超级良心的书，翻译是现任腾讯互娱T4级别的工程师Milo Yip（叶劲峰），专业人士翻译，而且翻译的非常用心，原书也是写的非常详细，即使是不从事游戏相关领域，也可以用来作为了解超大型项目组织的入门读物。\r\n\r\n以上说的可能还算有点道理，以下是纯口胡，纯个人观点而已（所以有没有道理都没关系）：\r\n\r\n计算机科学和技术的发展靠着两种模式：一个叫做“抽象”，另一个叫做“涌现”。“抽象”这里我把它解释为面向对象编程和分层结构形式的抽象，我很久以前看到过一句谚语？计算机上的设计问题都能够通过加一层封装接口来解决，如果不能就再加一层。我一直觉得分层封装实在是对计算机体系结构非常适合的一种发展模式，向上屏蔽细节，向下拓展兼容性，让整个系统天然的可以被并行的开发，而不需要考虑其他层的具体情况（除非极端情况），这是一种生产力很高的模式。而当若干具有某种同一属性的接口被抽象到一层的时候，就会“涌现”出某种新的属性，新的原始系统没有的属性。比方说把主板CPU内存弄到一块可以运行程序，当网络相关的东西都被打包起来的时候就变成AFNetworking（一个iOS上使用Objective-C实现的网络库）。而开发的时候做的事情大部分也就是这两个，设计新的接口从而实现不同的新功能和兼容性，或者把不同的接口打包涌现出新的功能或者业务逻辑。更具体的例子而言，比方说我现在需要实现一个叫做存储的功能，那么可以设计一个叫做存储的接口，然后这个接口下一个层次上实现新的接口，比如说网络存储、本地存储等不同的场景，然后在存储的接口中，根据传入的参数的不同调用不同的下层具体的接口实现。当然，存储这个接口也会被封装进其他的部分而产生作用，比如把存储接口跟几个按钮和本地加载接口放在一块，就能涌现出一个叫做“更换头像”的功能。更大的说，整个计算机软件体系结构，不就是在单独的一条条CPU指令集上的抽象和涌现吗？\r\n\r\n所以，在写代码、写工程的时候，考虑三个问题：1.如何组织我们的代码？ 2.如何组织我们的空间（缓存、内存、外存）？ 3.如何组织我们的消息（逻辑如何执行？怎么跳转？叫了哪个函数？网络如何通知？通知什么）？有一句话我是非常赞同的，高级程序语言的最重要的作用是让人更够读懂，一个合理的代码组织模式（比如OO范式，MVC设计模式等）可以帮助所有人快速的搞懂要做什么。如何组织我们的空间？对于CPU而言，其实他做的事情非常简单，就是拿出PC指向的一条指令，读一下，执行一下，然后下一条。而作为整个系统的构建者，在写工程的时候，要非常清晰的考虑到现在内存中是什么样子？哪些是指针？哪些有效而哪些需要释放？如何组织消息就更加明显了，当状态发生变化的时候，自然应该通知应该通知的人，或者是等着他来询问到底处于何种状态。这也只是我很不成熟而且有点空泛的想法，本来是想写《游戏引擎架构》长书评的时候说一说，一时兴起就随口扯几句，到时候更加详细的尝试着论证一番。\r\n\r\n睡了睡了。",
      "link": "4",
      "time": 1466032577841,
      "plugin": {
        "thumbnail": ""
      }
    }
  ],
  "pages": [
    {
      "title": "About",
      "content": "(｡･∀･)ﾉﾞ嗨，我是张新宇，一名正在上海念书的普通本科生，主修计算机科学与技术。平时最喜欢做的事情就是研究用心做出来的作品，比如去Github上看代码点Star，或者是去instagram评论Awesome，假象照片上的场景! （上面的作品们真是非常awesome）享受着连续发生的奇迹，偶尔也会尝试一丝变化，体力好的时候会渴望挑战，努力做着一个担当责任的人，也在克服着自己坚持力低下的缺点，希望和大家一起研究和经历这个复杂的世界，见证历史和存在。\r\n\r\n谢谢大家的注意。\r\n\r\n欢迎使用[RSS](http://xyzhang.xyz/atom.xml)来订阅这个博客站点来与我保持联络，也可以通过[douban](https://www.douban.com/people/perseawe/)或是[Github](https://github.com/zhangshea)来联络，如果更希望邮件联络的话，邮箱地址可以在Github上面找到。\r\n\r\n本站点所有的文章除去特别注明为转载或是遵守其他协议的情况，均发布在[Creative Commons 署名-非商业性使用-相同方式共享 3.0 协议](http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh)下，在本协议所限定下非商业使用的情况下可以自由的加以分享或是演绎，如需其他使用可以通过邮件联络。",
      "link": "about",
      "order": 0
    }
  ],
  "id": 4
}